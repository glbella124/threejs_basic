{"id":"shader/basic/fragment.glsl","dependencies":[{"name":"E:\\Bella\\Study\\threejs_basic\\11_shader_point\\package.json","includedInParent":true,"mtime":1661653617018}],"generated":{"js":"module.exports = \"precision lowp float;\\n#define GLSLIFY 1\\n\\nvarying vec2 vUv;\\nvarying vec3 vColor;\\n// 纹理采样\\nuniform sampler2D uTexture;\\nuniform sampler2D uTexture1;\\nuniform sampler2D uTexture2;\\n\\nvarying float vImgIndex;\\n\\nvoid main() {\\n    // gl_PointCoord -- 在点渲染模式中，对应方形像素坐标\\n    // gl_FragCoord -- 片元的坐标，同样是以像素为单位\\n    // https://www.yuque.com/books/share/aa187c93-6603-453e-9377-9a935b59aeb4/hrzh3y\\n\\n    // 设置渐变圆 -- 模拟星星\\n    // float strength = distance(gl_PointCoord, vec2(0.5));\\n    // strength*=2.0;\\n    // strength = 1.0 - strength;\\n    // gl_FragColor = vec4(strength);\\n\\n    // 圆形点\\n    // float strength = 1.0 - distance(gl_PointCoord, vec2(0.5));\\n    // strength = step(0.5,strength);\\n    // gl_FragColor = vec4(strength);\\n\\n    // 根据传入的纹理设置图案\\n    // vec4 textureColor = texture2D(uTexture,gl_PointCoord);\\n    // gl_FragColor = vec4(textureColor.rgb,textureColor.r);\\n\\n    // 根据纹理设置图案 -- 彩色\\n    vec4 textureColor;\\n    if(vImgIndex == 0.0) {\\n        textureColor = texture2D(uTexture, gl_PointCoord);\\n    } else if(vImgIndex == 1.0) {\\n        textureColor = texture2D(uTexture1, gl_PointCoord);\\n    } else {\\n        textureColor = texture2D(uTexture2, gl_PointCoord);\\n\\n    }\\n    gl_FragColor = vec4(vColor, textureColor.r);\\n\\n}\";"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"shader/basic/fragment.glsl","original":{"line":1,"column":0},"name":"module"},{"generated":{"line":1,"column":6},"source":"shader/basic/fragment.glsl","original":{"line":1,"column":6}},{"generated":{"line":1,"column":7},"source":"shader/basic/fragment.glsl","original":{"line":1,"column":7},"name":"exports"},{"generated":{"line":1,"column":14},"source":"shader/basic/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"shader/basic/fragment.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":1273},"source":"shader/basic/fragment.glsl","original":{"line":1,"column":0}}],"sources":{"shader/basic/fragment.glsl":"module.exports=\"precision lowp float;\\n#define GLSLIFY 1\\n\\nvarying vec2 vUv;\\nvarying vec3 vColor;\\n// 纹理采样\\nuniform sampler2D uTexture;\\nuniform sampler2D uTexture1;\\nuniform sampler2D uTexture2;\\n\\nvarying float vImgIndex;\\n\\nvoid main() {\\n    // gl_PointCoord -- 在点渲染模式中，对应方形像素坐标\\n    // gl_FragCoord -- 片元的坐标，同样是以像素为单位\\n    // https://www.yuque.com/books/share/aa187c93-6603-453e-9377-9a935b59aeb4/hrzh3y\\n\\n    // 设置渐变圆 -- 模拟星星\\n    // float strength = distance(gl_PointCoord, vec2(0.5));\\n    // strength*=2.0;\\n    // strength = 1.0 - strength;\\n    // gl_FragColor = vec4(strength);\\n\\n    // 圆形点\\n    // float strength = 1.0 - distance(gl_PointCoord, vec2(0.5));\\n    // strength = step(0.5,strength);\\n    // gl_FragColor = vec4(strength);\\n\\n    // 根据传入的纹理设置图案\\n    // vec4 textureColor = texture2D(uTexture,gl_PointCoord);\\n    // gl_FragColor = vec4(textureColor.rgb,textureColor.r);\\n\\n    // 根据纹理设置图案 -- 彩色\\n    vec4 textureColor;\\n    if(vImgIndex == 0.0) {\\n        textureColor = texture2D(uTexture, gl_PointCoord);\\n    } else if(vImgIndex == 1.0) {\\n        textureColor = texture2D(uTexture1, gl_PointCoord);\\n    } else {\\n        textureColor = texture2D(uTexture2, gl_PointCoord);\\n\\n    }\\n    gl_FragColor = vec4(vColor, textureColor.r);\\n\\n}\";"},"lineCount":null}},"error":null,"hash":"26b84a1fc41a6220639804672994de75","cacheData":{"env":{}}}